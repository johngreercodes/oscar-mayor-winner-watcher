---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import * as streamingAvailability from "streaming-availability";
import movies from '../data/movies.json';

const client = new streamingAvailability.Client(new streamingAvailability.Configuration({
	apiKey: import.meta.env.STREAMING_AVAILABILITY_API_KEY
}));

let newMoviesArray = []

/* 
game plan:
- I have an array of objects for each movie (movies.json)
- For each movie object, take the ID and use it to make an API request for the movie
- Receive data object from request
- Take data object and create a new object in a new array using title, director, runtime, poster, and streaming obtions
- Map over that NewMoviesArray to display content on the page
- Clean up /components/Card.astro
*/

movies[2025].forEach(element => {
	const data = client.showsApi.getShow({
		id: element.id,
		country: "us"
	});
	newMoviesArray.push({
		"title": `${data.title}`,
		"director": "",
		"runtime": "",
		"poster": "",
		"streamingOptions": ""
	})
});

const data = await client.showsApi.getShow({
	id: movies[2025][0].id, // imdb id for Emilia Pérez
	country: "us"
});

const convertRuntime = (runtime: any) => {
  let hours = Math.floor(runtime/60);
  let minutes = (runtime % 60);
  return `${hours}hr ${minutes}min`
}
---

<Layout>
	<header>
		<h1>Let's all go to the movies!</h1>
		<h2>Oscar Mayor Winner Watcher</h2>
	</header>
	<main>
		<section id="year-selector">
			<label>Select a year</label>
			<select>
				<option>2025</option>
			</select>
			<button>Get movies</button>
		</section>	
		<section id="card-grid">
			<Card title="Emilia Pérez" director="Jacques Audiard"/>
			{movies[2025].map((movie)=><div>{movie.id}</div>)}
		</section>
	</main>
	<footer>
		<a href="https://johngruyere.com/" target="_blank">Built by Greer</a>
	</footer>	
</Layout>

<style>
	header {
		color: goldenrod;
		height: 1rem;
	}
	main {
		color: goldenrod;
		padding: 1rem 0 0 0;
	}
	#year-selector {
		padding: 1rem;
	}
	#card-grid {
		display: grid;
    	gap: 1rem;
    	grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
	}
	footer {
		color: goldenrod;	
	}
	footer a {
		text-decoration: none;
		color: goldenrod;
	}
	footer a:hover {
		text-decoration: underline;
	}
</style>
